{"version":3,"sources":["../../src/resolvers/user.js"],"names":["jwt_encryption","jwt_expiration","config","Query","allUsers","parent","args","User","info","users","find","map","user","_id","toString","error","Error","currentUser","token","response","jwt","decode","findById","sub","password","Mutation","createAccount","firstname","lastname","email","foundUser","findOne","hashedPassword","bcrypt","hash","save","savedUser","authenticated","loginToAccount","passwordsMatch","compare","message","socialLogin","updatePassword","console","log","findByIdAndRemove","deleteAccount","sign","toJSON","expiresIn"],"mappings":"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","file":"user.js","sourcesContent":["import bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport config from '../config';\r\n\r\nconst { jwt_encryption, jwt_expiration } = config;\r\n\r\nexport default {\r\n  Query: {\r\n    allUsers: async (parent, args, { User }, info) => {\r\n      try {\r\n        const users = await User.find();\r\n        return users.map(user => {\r\n          user._id = user._id.toString();\r\n          return user;\r\n        });\r\n      } catch (error) {\r\n        throw new Error(error);\r\n      }\r\n    },\r\n    currentUser: async (parent, { token }, { User }, info) => {\r\n      try {\r\n        const response = await jwt.decode(token, jwt_encryption);\r\n        const user = await User.findById(response.sub, { password: 0 });\r\n\r\n        return user;\r\n      } catch (error) {\r\n        throw new Error(error);\r\n      }\r\n    },\r\n  },\r\n  Mutation: {\r\n    createAccount: async (\r\n      parent,\r\n      { firstname, lastname, email, password },\r\n      { User },\r\n      info\r\n    ) => {\r\n      try {\r\n        // Check if there is a user with the same email\r\n        const foundUser = await User.findOne({ email });\r\n\r\n        if (foundUser) {\r\n          throw new Error('Email is already in use');\r\n        }\r\n\r\n        // If no user with email create a new user\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n        await new User({\r\n          firstname,\r\n          lastname,\r\n          email,\r\n          password: hashedPassword,\r\n        }).save();\r\n\r\n        const savedUser = await User.findOne({ email });\r\n\r\n        // Assign auth token to new user\r\n        return { \r\n          authenticated: true, \r\n          token: token(savedUser) \r\n        };\r\n      } catch (error) {\r\n        throw new Error(error);\r\n      }\r\n    },\r\n    loginToAccount: async (parent, { email, password }, { User }, info) => {\r\n      try {\r\n        // Check if there is a user with the same email\r\n        const user = await User.findOne({ email });\r\n\r\n        if (user) {\r\n          // Compare passwords\r\n          const passwordsMatch = await bcrypt.compare(password, user.password);\r\n\r\n          // Assign auth token if passwords match\r\n          if (passwordsMatch) {\r\n            return { \r\n              authenticated: true, \r\n              token: token(user) \r\n            };\r\n          } else {\r\n            throw new Error({\r\n              authenticated: false,\r\n              message: 'The password you have entered is incorrect'\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        throw new Error(error);\r\n      }\r\n    },\r\n    socialLogin: async (parent, args, { User }, info) => {\r\n      try {\r\n      } catch (error) {\r\n        throw new Error(error);\r\n      }\r\n    },\r\n    updatePassword: async (parent, args, { User }, info) => {\r\n      try {\r\n        console.log(args);\r\n        await User.findByIdAndRemove(args);\r\n      } catch (error) {\r\n        throw new Error(error);\r\n      }\r\n    },\r\n    deleteAccount: async (parent, args, { User }, info) => {\r\n      try {\r\n        console.log(args);\r\n        await User.findByIdAndRemove(args);\r\n      } catch (error) {\r\n        throw new Error(error);\r\n      }\r\n    },\r\n  },\r\n};\r\n\r\n// Generate auth token\r\nfunction token(user) {\r\n  return jwt.sign(user.toJSON(), jwt_encryption, {\r\n    expiresIn: jwt_expiration,\r\n  });\r\n}\r\n\r\n"]}