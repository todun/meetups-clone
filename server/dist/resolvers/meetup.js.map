{"version":3,"sources":["../../src/resolvers/meetup.js"],"names":["Query","allMeetups","parent","args","Meetup","info","fetchMeetups","meetupsByType","type","name","value","meetupsByLocation","location","meetupsByTypeAndLocation","Mutation","createMeetup","User","newMeetup","save","findByIdAndUpdate","addedBy","$push","addedMeetups","_id","toString","error","Error","message","model","condition","meetupsQuery","find","meetups","map","meetup"],"mappings":";;;;;kBAAe;AACbA,SAAO;AACLC,gBAAY,CAACC,MAAD,EAASC,IAAT,EAAe,EAAEC,MAAF,EAAf,EAA2BC,IAA3B,KAAoCC,aAAaF,MAAb,CAD3C;;AAGLG,mBAAe,CAACL,MAAD,EAAS,EAAEM,IAAF,EAAT,EAAmB,EAAEJ,MAAF,EAAnB,EAA+BC,IAA/B,KACbC,aAAaF,MAAb,EAAqB,EAAEK,MAAM,MAAR,EAAgBC,OAAOF,IAAvB,EAArB,CAJG;;AAMLG,uBAAmB,CAACT,MAAD,EAAS,EAAEU,QAAF,EAAT,EAAuB,EAAER,MAAF,EAAvB,EAAmCC,IAAnC,KACjBC,aAAaF,MAAb,EAAqB,EAAEK,MAAM,UAAR,EAAoBC,OAAOE,QAA3B,EAArB,CAPG;;AASLC,8BAA0B,CAACX,MAAD,EAAS,EAAEM,IAAF,EAAQI,QAAR,EAAT,EAA6B,EAAER,MAAF,EAA7B,EAAyCC,IAAzC,KACxBC,aAAaF,MAAb,EAAqB;AACnBK,YAAM,mBADa;AAEnBC,aAAO,CAACF,IAAD,EAAOI,QAAP;AAFY,KAArB;AAVG,GADM;;AAiBbE,YAAU;AACRC,kBAAc,OAAOb,MAAP,EAAeC,IAAf,EAAqB,EAAEC,MAAF,EAAUY,IAAV,EAArB,EAAuCX,IAAvC,KAAgD;AAC5D,UAAI;AACF;AACA,cAAMY,YAAY,MAAM,IAAIb,MAAJ,CAAWD,IAAX,EAAiBe,IAAjB,EAAxB;;AAEA;AACA,cAAMF,KAAKG,iBAAL,CAAuBhB,KAAKiB,OAA5B,EAAqC;AACzCC,iBAAO,EAAEC,cAAcL,UAAUM,GAA1B;AADkC,SAArC,CAAN;;AAIAN,kBAAUM,GAAV,GAAgBN,UAAUM,GAAV,CAAcC,QAAd,EAAhB;;AAEA,eAAOP,SAAP;AACD,OAZD,CAYE,OAAOQ,KAAP,EAAc;AACd,cAAM,IAAIC,KAAJ,CAAUD,MAAME,OAAhB,CAAN;AACD;AACF;AAjBO;AAjBG,C;;;AAsCf,eAAerB,YAAf,CAA4BsB,KAA5B,EAAmCC,SAAnC,EAA8C;AAC5C,MAAI;AACF,UAAMC,eAAe,YAAY;AAC/B,UAAI,CAACD,SAAL,EAAgB;AACd,eAAOD,MAAMG,IAAN,EAAP;AACD;AACD,UAAIF,UAAUpB,IAAV,KAAmB,MAAvB,EAA+B;AAC7B,eAAOmB,MAAMG,IAAN,CAAW,EAAEvB,MAAMqB,UAAUnB,KAAlB,EAAX,CAAP;AACD;AACD,UAAImB,UAAUpB,IAAV,KAAmB,UAAvB,EAAmC;AACjC,eAAOmB,MAAMG,IAAN,CAAW;AAChB,2BAAiB;AACf,mBAAQF,UAAUnB,KADH;AAEf,uBAAY;AAFG;AADD,SAAX,CAAP;AAMD;AACD,UAAImB,UAAUpB,IAAV,KAAmB,mBAAvB,EAA4C;AAC1C,eAAOmB,MAAMG,IAAN,CACL,EAAEvB,MAAMqB,UAAUnB,KAAV,CAAgB,CAAhB,CAAR,EADK,EAEL,EAAE,iBAAiBmB,UAAUnB,KAAV,CAAgB,CAAhB,CAAnB,EAFK,CAAP;AAID;AACF,KArBD;;AAuBA,UAAMsB,UAAU,MAAMF,cAAtB;;AAEA,WAAOE,QAAQC,GAAR,CAAYC,UAAU;AAC3BA,aAAOX,GAAP,GAAaW,OAAOX,GAAP,CAAWC,QAAX,EAAb;AACA,aAAOU,MAAP;AACD,KAHM,CAAP;AAID,GA9BD,CA8BE,OAAOT,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAUD,MAAME,OAAhB,CAAN;AACD;AACF","file":"meetup.js","sourcesContent":["export default {\r\n  Query: {\r\n    allMeetups: (parent, args, { Meetup }, info) => fetchMeetups(Meetup),\r\n\r\n    meetupsByType: (parent, { type }, { Meetup }, info) =>\r\n      fetchMeetups(Meetup, { name: 'type', value: type }),\r\n\r\n    meetupsByLocation: (parent, { location }, { Meetup }, info) =>\r\n      fetchMeetups(Meetup, { name: 'location', value: location }),\r\n\r\n    meetupsByTypeAndLocation: (parent, { type, location }, { Meetup }, info) =>\r\n      fetchMeetups(Meetup, {\r\n        name: 'location and type',\r\n        value: [type, location],\r\n      }),\r\n  },\r\n\r\n  Mutation: {\r\n    createMeetup: async (parent, args, { Meetup, User }, info) => {\r\n      try {\r\n        // Save new meetup\r\n        const newMeetup = await new Meetup(args).save();\r\n\r\n        // Update current user's [addedMeetups]\r\n        await User.findByIdAndUpdate(args.addedBy, {\r\n          $push: { addedMeetups: newMeetup._id },\r\n        });\r\n\r\n        newMeetup._id = newMeetup._id.toString();\r\n\r\n        return newMeetup;\r\n      } catch (error) {\r\n        throw new Error(error.message);\r\n      }\r\n    },\r\n  },\r\n};\r\n\r\nasync function fetchMeetups(model, condition) {\r\n  try {\r\n    const meetupsQuery = async () => {\r\n      if (!condition) {\r\n        return model.find();\r\n      }\r\n      if (condition.name === 'type') {\r\n        return model.find({ type: condition.value });\r\n      }\r\n      if (condition.name === 'location') {\r\n        return model.find({ \r\n          \"location.name\": { \r\n            \"$eq\" : condition.value, \r\n            \"$exists\" : true \r\n          } \r\n        });\r\n      }\r\n      if (condition.name === 'location and type') {\r\n        return model.find(\r\n          { type: condition.value[0] },\r\n          { \"location.name\": condition.value[1] }\r\n        );\r\n      }\r\n    };\r\n\r\n    const meetups = await meetupsQuery();\r\n\r\n    return meetups.map(meetup => {\r\n      meetup._id = meetup._id.toString();\r\n      return meetup;\r\n    });\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n"]}