{"version":3,"sources":["../../src/models/users.js"],"names":["Schema","mongoose","UserSchema","name","String","email","salt","type","required","hashedPassword","addedMeetups","Types","ObjectId","ref","hostedMeetups","attendedMeetups","attending","timestamps","methods","toJSON","user","toObject","__v","virtual","get","_id","set","password","crypto","randomBytes","toString","encryptPassword","createHmac","update","digest","checkPassword","User","model","pre","next","isModified","isNew","error","hash","to","bcrypt","genSalt","TE","message","comparePassword","pw","err","pass","bcrypt_p","compare","getJWT","expiration_time","parseInt","CONFIG","jwt_expiration","jwt","sign","user_id","jwt_encryption","expiresIn","toWeb","json","id"],"mappings":"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","file":"users.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport crypto from 'crypto';\r\n\r\nconst Schema = mongoose.Schema;\r\nconst UserSchema = new Schema({\r\n  name: String,\r\n  email: String,\r\n  salt: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  hashedPassword: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  addedMeetups: [{ type: Schema.Types.ObjectId, ref: 'Event' }],\r\n  hostedMeetups: [{ type: Schema.Types.ObjectId, ref: 'Event' }],\r\n  attendedMeetups: [{ type: Schema.Types.ObjectId, ref: 'Event' }],\r\n  attending: [{ type: Schema.Types.ObjectId, ref: 'Event' }],\r\n},\r\n{\r\n  timestamps: true,\r\n});\r\n\r\n// Exclude selected before returning user\r\nUserSchema.methods.toJSON = () => {\r\n  const user = this.toObject();\r\n  delete user.hashedPassword;\r\n  delete user.__v;\r\n  delete user.salt;\r\n\r\n  return user;\r\n};\r\n\r\nUserSchema.virtual('id').get(function() {\r\n  return this._id;\r\n});\r\n\r\n// Encrypt password before returning\r\nUserSchema.virtual('password')\r\n  .set(function(password) {\r\n    this.salt = crypto.randomBytes(32).toString('base64');\r\n    this.hashedPassword = this.encryptPassword(password, this.salt);\r\n  })\r\n  .get(function() {\r\n    return this.hashedPassword;\r\n  });\r\n\r\nUserSchema.methods.encryptPassword = (password, salt) =>\r\n  crypto\r\n    .createHmac('sha1', salt)\r\n    .update(password)\r\n    .digest('hex');\r\n\r\n// Compare passwords (login flow)\r\nUserSchema.methods.checkPassword = function(password) {\r\n  return this.encryptPassword(password, this.salt) === this.hashedPassword;\r\n};\r\n\r\nconst User = mongoose.model('User', UserSchema);\r\n\r\nexport default User;\r\n\r\n\r\n\r\nUserSchema.pre('save', async function(next) {\r\n  if (this.isModified('password') || this.isNew) {\r\n    let error, salt, hash;\r\n    [error, salt] = await to(bcrypt.genSalt(10));\r\n    if (error) TE(error.message, true);\r\n\r\n    [error, hash] = await to(bcrypt.hash(this.password, salt));\r\n    if (error) TE(error.message, true);\r\n\r\n    this.password = hash;\r\n  } else {\r\n    return next();\r\n  }\r\n});\r\n\r\nUserSchema.methods.comparePassword = async function(pw) {\r\n  let err, pass;\r\n  if (!this.password) TE('password not set');\r\n\r\n  [err, pass] = await to(bcrypt_p.compare(pw, this.password));\r\n  if (err) TE(err);\r\n\r\n  if (!pass) TE('invalid password');\r\n\r\n  return this;\r\n};\r\n\r\nUserSchema.methods.getJWT = function() {\r\n  let expiration_time = parseInt(CONFIG.jwt_expiration);\r\n  return (\r\n    'Bearer ' +\r\n    jwt.sign({ user_id: this._id }, CONFIG.jwt_encryption, {\r\n      expiresIn: expiration_time,\r\n    })\r\n  );\r\n};\r\n\r\nUserSchema.methods.toWeb = function() {\r\n  let json = this.toJSON();\r\n  json.id = this._id; //this is for the front end\r\n  return json;\r\n};\r\n"]}