{"version":3,"sources":["../../src/models/user.js"],"names":["Schema","mongoose","UserSchema","firstname","type","String","lastname","email","lowercase","trim","index","unique","sparse","validate","validator","message","password","addedMeetups","Types","ObjectId","ref","hostedMeetups","attendedMeetups","attending","timestamps","virtual","get","set","name","str","split","User","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,SAASC,mBAASD,MAAxB;;AAEA,MAAME,aAAa,IAAIF,MAAJ,CAAW;AAC5BG,aAAW,EAAEC,MAAMC,MAAR,EADiB;AAE5BC,YAAU,EAAEF,MAAMC,MAAR,EAFkB;AAG5BE,SAAO;AACLH,UAAMC,MADD;AAELG,eAAW,IAFN;AAGLC,UAAM,IAHD;AAILC,WAAO,IAJF;AAKLC,YAAQ,IALH;AAMLC,YAAQ,IANH;AAOLC,cAAU,CACR,iCAAS;AACPC,iBAAW,SADJ;AAEPC,eAAS;AAFF,KAAT,CADQ;AAPL,GAHqB;AAiB5BC,YAAU,EAAEZ,MAAMC,MAAR,EAjBkB;AAkB5BY,gBAAc,CAAC,EAAEb,MAAMJ,OAAOkB,KAAP,CAAaC,QAArB,EAA+BC,KAAK,QAApC,EAAD,CAlBc;AAmB5BC,iBAAe,CAAC,EAAEjB,MAAMJ,OAAOkB,KAAP,CAAaC,QAArB,EAA+BC,KAAK,QAApC,EAAD,CAnBa;AAoB5BE,mBAAiB,CAAC,EAAElB,MAAMJ,OAAOkB,KAAP,CAAaC,QAArB,EAA+BC,KAAK,QAApC,EAAD,CApBW;AAqB5BG,aAAW,CAAC,EAAEnB,MAAMJ,OAAOkB,KAAP,CAAaC,QAArB,EAA+BC,KAAK,QAApC,EAAD;AArBiB,CAAX,EAuBnB;AACCI,cAAY;AADb,CAvBmB,CAAnB;;AA2BAtB,WAAWuB,OAAX,CAAmB,UAAnB,EAA+BC,GAA/B,CAAmC,YAAW;AAC5C,SAAO,KAAKvB,SAAL,GAAiB,GAAjB,GAAuB,KAAKG,QAAnC;AACD,CAFD;;AAIAJ,WAAWuB,OAAX,CAAmB,UAAnB,EAA+BE,GAA/B,CAAmC,UAASC,IAAT,EAAe;AAChD,QAAMC,MAAMD,KAAKE,KAAL,CAAW,GAAX,CAAZ;;AAEA,OAAK3B,SAAL,GAAiB0B,IAAI,CAAJ,CAAjB;AACA,OAAKvB,QAAL,GAAgBuB,IAAI,CAAJ,CAAhB;AACD,CALD;;AAOA,MAAME,OAAO9B,mBAAS+B,KAAT,CAAe,MAAf,EAAuB9B,UAAvB,CAAb;;kBAEe6B,I","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport validate from 'mongoose-validator';\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nconst UserSchema = new Schema({\r\n  firstname: { type: String },\r\n  lastname: { type: String },\r\n  email: {\r\n    type: String,\r\n    lowercase: true,\r\n    trim: true,\r\n    index: true,\r\n    unique: true,\r\n    sparse: true,\r\n    validate: [\r\n      validate({\r\n        validator: 'isEmail',\r\n        message: 'Please enter a valid email.',\r\n      }),\r\n    ],\r\n  },\r\n  password: { type: String },\r\n  addedMeetups: [{ type: Schema.Types.ObjectId, ref: 'Meetup' }],\r\n  hostedMeetups: [{ type: Schema.Types.ObjectId, ref: 'Meetup' }],\r\n  attendedMeetups: [{ type: Schema.Types.ObjectId, ref: 'Meetup' }],\r\n  attending: [{ type: Schema.Types.ObjectId, ref: 'Meetup' }],\r\n},\r\n{\r\n\ttimestamps: true,\r\n});\r\n\r\nUserSchema.virtual('fullname').get(function() {\r\n  return this.firstname + ' ' + this.lastname;\r\n});\r\n\r\nUserSchema.virtual('fullname').set(function(name) {\r\n  const str = name.split(' ');\r\n\r\n  this.firstname = str[0];\r\n  this.lastname = str[1];\r\n});\r\n\r\nconst User = mongoose.model('User', UserSchema);\r\n\r\nexport default User;\r\n"]}